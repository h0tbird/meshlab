#!/usr/bin/env bash

#------------------------------------------------------------------------------
# [i] Initializations
#------------------------------------------------------------------------------

# Bash strict mode
set -euo pipefail

# Change to the execution directory
cd "$(dirname "$0")"/..

# shellcheck source=/dev/null
source lib/common.sh

#------------------------------------------------------------------------------
# [i] Versions
#------------------------------------------------------------------------------

ARGOCD_CHART_VERSION='7.7.6'  # https://artifacthub.io/packages/helm/argo-cd-oci/argo-cd
CILIUM_CHART_VERSION='1.16.4' # https://artifacthub.io/packages/helm/cilium/cilium

#------------------------------------------------------------------------------
# [i] Ports
#------------------------------------------------------------------------------

ARGOCD_PORT=30080

#------------------------------------------------------------------------------
# [i] Validate the command line arguments
#------------------------------------------------------------------------------

[[ $# -ne 1 || ($1 != "create" && $1 != "delete") ]] && \
{ echo "Usage: $0 <create|delete>"; exit 1; }

#------------------------------------------------------------------------------
# [i] Handle the delete command
#------------------------------------------------------------------------------

if [[ $1 == "delete" ]]; then
  kind delete clusters --all
  rm -rf ./tmp/*
  exit 0
fi

#------------------------------------------------------------------------------
# [i] Create the clusters
#------------------------------------------------------------------------------

blue "---[ KinD clusters ]----------------------------------------------------"

# Create the configurations
cat << EOF > ./tmp/kind-kube-00.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
networking:
  disableDefaultCNI: true
  kubeProxyMode: "none"
nodes:
  - role: control-plane
    extraPortMappings:
      - containerPort: ${ARGOCD_PORT}
        hostPort: ${ARGOCD_PORT}
        protocol: TCP
EOF

cat << EOF > ./tmp/kind-pasta-1.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
networking:
  disableDefaultCNI: true
  kubeProxyMode: "none"
EOF

cat << EOF > ./tmp/kind-pasta-2.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
networking:
  disableDefaultCNI: true
  kubeProxyMode: "none"
EOF

# Create the clusters
for CLUSTER in $(list clusters all); do
  if ! kind get clusters | grep -q "${CLUSTER}"; then
    ( kind create cluster --name "${CLUSTER}" --config "./tmp/kind-${CLUSTER}.yaml" ) &
  fi
done; wait

#------------------------------------------------------------------------------
# [i] Aliases
#------------------------------------------------------------------------------

function k0 {
  kubectl --context kind-kube-00 "${@}"
}

function h0 {
  helm --kube-context kind-kube-00 "${@}"
}

#------------------------------------------------------------------------------
# [i] Helm repositories
#------------------------------------------------------------------------------

blue "---[ Helm repos ]-------------------------------------------------------"

helm repo add cilium https://helm.cilium.io/
helm repo update

#------------------------------------------------------------------------------
# [i] Install the Cilium CNI
#------------------------------------------------------------------------------

blue "---[ Cilium CNI ]--------------------------------------------------------"

# Install the Cilium CNI
for CLUSTER in $(list clusters all); do

 IP="$(docker inspect "${CLUSTER}-control-plane" |
 jq -r '.[].NetworkSettings.Networks.kind.IPAddress')"

 { helm --kube-context "kind-${CLUSTER}" \
     upgrade -i cilium cilium/cilium \
     --version "${CILIUM_CHART_VERSION}" \
     --namespace kube-system \
     --values ./charts/cilium/values.yaml \
     --values ./charts/cilium/values/"${CLUSTER}".yaml \
     --set k8sServiceHost="${IP}"

   kubectl --context "kind-${CLUSTER}" \
     wait --for=condition=Ready nodes \
     --all --timeout=60s; } &

done; wait

#------------------------------------------------------------------------------
# [i] Setup ArgoCD
#------------------------------------------------------------------------------

blue "---[ ArgoCD ]-----------------------------------------------------------"

# Login to the GitHub Container Registry
echo "${GITHUB_TOKEN}" | docker login ghcr.io -u "${GITHUB_USER}" --password-stdin

# Install ArgoCD
h0 upgrade --install -n argocd --create-namespace --wait --timeout 5m \
argocd oci://ghcr.io/argoproj/argo-helm/argo-cd --version "${ARGOCD_CHART_VERSION}" \
--set 'server.service.type=NodePort' \
--set "server.service.nodePortHttp=${ARGOCD_PORT}" \
-f - << EOF | grep -E '^NAME|^LAST|^STATUS|^REVISION|^TEST'
configs:
  cm:
    resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
      jqPathExpressions:
      - '.webhooks[]?.clientConfig.caBundle'
EOF

# Get the password
ARGOCD_PASS=$(
  k0 -n argocd \
  get secret argocd-initial-admin-secret \
  -o jsonpath='{.data.password}' | base64 -d
)

echo
echo "ArgoCD WebUI: https://localhost:30080"
echo "ArgoCD User: admin"
echo "ArgoCD Pass: ${ARGOCD_PASS}"