---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: populate-vault
spec:
  entrypoint: populate-vault
  templates:
  - name: populate-vault
    inputs:
      parameters:
      - name: vault-address
      - name: vault-token
    outputs:
      parameters:
      - name: role-id
        valueFrom:
          path: /tmp/ROLE_ID
      - name: secret-id-b64
        valueFrom:
          path: /tmp/SECRET_ID_B64
    script:
      image: hashicorp/vault
      command: [sh]
      env:
        - name: VAULT_ADDR
          value: {{`"{{inputs.parameters.vault-address}}"`}}
        - name: VAULT_TOKEN
          value: {{`"{{inputs.parameters.vault-token}}"`}}
      source: |
        #!/bin/sh

        apk add --no-cache jq

        while ! vault status &>/dev/null; do sleep 1; done

        # One root CA for all the stamps
        vault secrets list | grep -q "mesh" || {
          vault secrets enable --path "mesh" \
          -description "PKI for the mesh" pki
          vault secrets tune -max-lease-ttl=87600h "mesh"
          vault write -field=certificate "mesh/root/generate/internal" \
          common_name="mesh" ttl=87600h > /dev/null
          vault write "mesh/config/urls" \
             issuing_certificates="${VAULT_ADDR}/v1/mesh/ca" \
             crl_distribution_points="${VAULT_ADDR}/v1/mesh/crl"
        }

        # Create a policy for cert-manager to issue intermediate CAs
        vault policy list | grep -q "mesh-cert-manager" || {
        vault policy write "mesh-cert-manager" - << EOF
        path "mesh/root/sign-intermediate" {
          capabilities = ["create", "read", "update"]
        }
        path "mesh/intermediate/set-signed" {
          capabilities = ["create", "update"]
        }
        path "mesh/roles/ica" {
          capabilities = ["read"]
        }
        EOF
        }

        # Create an AppRole for cert-manager to issue intermediate CAs
        vault auth list | grep -q 'approle' || {
          vault auth enable approle
          vault write "auth/approle/role/mesh-cert-manager" \
            secret_id_ttl=0 \
            token_num_uses=0 \
            token_ttl=0 \
            token_max_ttl=0 \
            secret_id_num_uses=0 \
            token_policies="mesh-cert-manager"
        }

        # Get the cert-manager's RoleID
        ROLE_ID=$(
          vault read -format json \
          "auth/approle/role/mesh-cert-manager/role-id" | \
          jq -r '.data.role_id'
        )

        # Get the cert-manager's SecretID
        SECRET_ID_B64=$(
          vault write -format json \
          -f "auth/approle/role/mesh-cert-manager/secret-id" | \
          jq -r '.data.secret_id' | base64 -w0
        )

        echo -n "${ROLE_ID}" > /tmp/ROLE_ID
        echo -n "${SECRET_ID_B64}" > /tmp/SECRET_ID_B64
