#!/usr/bin/env bash

#------------------------------------------------------------------------------
# Source helper functions
#------------------------------------------------------------------------------

source lib/misc.sh

#------------------------------------------------------------------------------
# Pull through image cache
#------------------------------------------------------------------------------

docker start registry-docker.io || docker run -d -p 5001:5000 \
  -e REGISTRY_PROXY_REMOTEURL=https://registry-1.docker.io \
  --restart always \
  --name registry-docker.io \
  registry:2

docker start registry-quay.io || docker run -d -p 5002:5000 \
  -e REGISTRY_PROXY_REMOTEURL=https://quay.io \
  --restart always \
  --name registry-quay.io \
  registry:2

docker start registry-ghcr.io || docker run -d -p 5003:5000 \
  -e REGISTRY_PROXY_REMOTEURL=https://ghcr.io \
  --restart always \
  --name registry-ghcr.io \
  registry:2

#------------------------------------------------------------------------------
# Create an Istio root CA
#------------------------------------------------------------------------------

[ -d ./tmp/istio-ca ] || {
  mkdir -p ./tmp/istio-ca
  step certificate create \
    "Istio root CA" \
    "./tmp/istio-ca/root-cert.pem" \
    "./tmp/istio-ca/root-key.pem" \
    --san *.example.com \
    --not-after 87600h \
    --profile root-ca \
    --no-password \
    --insecure \
    --kty RSA \
    --force
}

#------------------------------------------------------------------------------
# Create clusters and VMs
#------------------------------------------------------------------------------

multipass start kube-00 2>/dev/null || launch_k8s kube-00
multipass start kube-01 2>/dev/null || launch_k8s kube-01
multipass start kube-02 2>/dev/null || launch_k8s kube-02
multipass start virt-01 2>/dev/null || launch_vms virt-01

#------------------------------------------------------------------------------
# Setup KUBECONFIG
#------------------------------------------------------------------------------

KUBECONFIG=~/.kube/config:tmp/kube-00/config:tmp/kube-01/config:tmp/kube-02/config \
kubectl config view --flatten > ./tmp/config && cp ./tmp/config ~/.kube/config

#------------------------------------------------------------------------------
# Setup ArgoCD
#------------------------------------------------------------------------------

ARGOCD_PASS=$(kubectl --context kube-00 -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d)
ARGOCD_IP=$(kubectl --context kube-00 -n argocd get svc argocd-server -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

argocd context kube-00 2> /dev/null || {

  [[ -n "${ARGOCD_PASS}" && -n "${ARGOCD_IP}" ]] || exit 1

  argocd login ${ARGOCD_IP} \
    --insecure \
    --name kube-00 \
    --username admin \
    --password ${ARGOCD_PASS}

  argocd cluster add -y kube-01
  argocd cluster add -y kube-02
}

#------------------------------------------------------------------------------
# Deploy Istio
#------------------------------------------------------------------------------

kubectl --context kube-00 apply -f ./conf/argocd-istio.yaml
sleep 2; ALIST=$(argocd app list)

# Base
[ $(echo "${ALIST}" | grep istio-base | grep -c 'Synced  Healthy') -eq 2 ] || {
  echo "argocd app sync kube-01-istio-base kube-02-istio-base"
  argocd app sync kube-01-istio-base kube-02-istio-base > /dev/null
  argocd app wait kube-01-istio-base kube-02-istio-base > /dev/null
}

# Cni
[ $(echo "${ALIST}" | grep istio-cni | grep -c 'Synced  Healthy') -eq 2 ] || {
  echo "argocd app sync kube-01-istio-cni kube-02-istio-cni"
  argocd app sync kube-01-istio-cni kube-02-istio-cni > /dev/null
  argocd app wait kube-01-istio-cni kube-02-istio-cni > /dev/null
}

# Pilot
[ $(echo "${ALIST}" | grep istio-pilot | grep -c 'Synced  Healthy') -eq 2 ] || {
 echo "argocd app sync kube-01-istio-pilot kube-02-istio-pilot"
 argocd app sync kube-01-istio-pilot kube-02-istio-pilot > /dev/null
 argocd app wait kube-01-istio-pilot kube-02-istio-pilot > /dev/null
}

# IngressGateways
[ $(echo "${ALIST}" | grep istio-igws | grep -c 'Synced  Healthy') -eq 2 ] || {
  echo "argocd app sync kube-01-istio-igws kube-02-istio-igws"
  argocd app sync kube-01-istio-igws kube-02-istio-igws > /dev/null
  argocd app wait kube-01-istio-igws kube-02-istio-igws > /dev/null
}

# East-West gateway
[ $(echo "${ALIST}" | grep istio-ewgw | grep -c 'Synced  Healthy') -eq 2 ] || {
  echo "argocd app sync kube-01-istio-ewgw kube-02-istio-ewgw"
  argocd app sync kube-01-istio-ewgw kube-02-istio-ewgw > /dev/null
  argocd app wait kube-01-istio-ewgw kube-02-istio-ewgw > /dev/null
}

#------------------------------------------------------------------------------
# Enable endpoint discovery
#------------------------------------------------------------------------------

istioctl x create-remote-secret --context kube-01 --name=kube-01 | \
kubectl --context kube-02 apply -f -
istioctl x create-remote-secret --context kube-02 --name=kube-02 | \
kubectl --context kube-01 apply -f -

#------------------------------------------------------------------------------
# Deploy httpbin
#------------------------------------------------------------------------------

kubectl --context kube-00 apply -f ./conf/argocd-httpbin.yaml

[ $(echo "${ALIST}" | grep httpbin | grep -c 'Synced  Healthy') -eq 2 ] || {
  echo "argocd app sync kube-01-httpbin kube-02-httpbin"
  argocd app sync kube-01-httpbin kube-02-httpbin > /dev/null
  argocd app wait kube-01-httpbin kube-02-httpbin > /dev/null
}

#------------------------------------------------------------------------------
# Setup a non-k8s workload
#------------------------------------------------------------------------------

# Generate the VM files
istioctl x workload entry configure \
  --context kube-01 \
  -n httpbin \
  -r 1-16-0 \
  --name httpbin \
  --clusterID kube-01 \
  --autoregister \
  -o ./tmp/virt-01/vm-files

# Use the custom address defined in ISTIOD_CUSTOM_HOST
grep -rl 'istiod-1-16-0.istio-system.svc' ./tmp | \
xargs sed -i 's/istiod-1-16-0.istio-system.svc/istiod.kube-01/g'

# Download the istio-sidecar.deb
[ -f ./tmp/virt-01/istio-sidecar.deb ] || {
  curl -sLo ./tmp/virt-01/istio-sidecar.deb \
  https://storage.googleapis.com/istio-release/releases/1.16.0/deb/istio-sidecar-$(arch).deb
}

# Setup the VM files
cp ./conf/vm-setup ./tmp/virt-01
multipass exec virt-01 -- sudo /mnt/host/vm-setup

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------

echo
echo "ArgoCD WebUI: https://${ARGOCD_IP}"
echo "ArgoCD User: admin"
echo "ArgoCD Pass: ${ARGOCD_PASS}"
