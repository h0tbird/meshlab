#!/usr/bin/env bash

##-----------------------------------------------------------------------------
## TODO Create a cli tool that will be installed via brew and will be used to
## create the VMs and install a controller. VMs will be created by multipass
## using remote custom images pre-created with packer.
##-----------------------------------------------------------------------------

#------------------------------------------------------------------------------
# [i] Initializations
#------------------------------------------------------------------------------

# Bash strict mode
set -euo pipefail

# Change to the execution directory
cd "$(dirname "$0")"/..

# shellcheck source=/dev/null
source lib/common.sh
# shellcheck source=/dev/null
source lib/misc.sh

#------------------------------------------------------------------------------
# [i] Pull-through image cache
#------------------------------------------------------------------------------

echo -e "\n---[ Pull-through registries ]-----------------------------------\n"

docker start registry-docker.io 2>/dev/null || docker run -d -p 5011:5000 \
  -e REGISTRY_PROXY_REMOTEURL=https://registry-1.docker.io \
  --restart always \
  --name registry-docker.io \
  registry:2

docker start registry-quay.io 2>/dev/null || docker run -d -p 5012:5000 \
  -e REGISTRY_PROXY_REMOTEURL=https://quay.io \
  --restart always \
  --name registry-quay.io \
  registry:2

docker start registry-ghcr.io 2>/dev/null || docker run -d -p 5013:5000 \
  -e REGISTRY_PROXY_REMOTEURL=https://ghcr.io \
  --restart always \
  --name registry-ghcr.io \
  registry:2

#------------------------------------------------------------------------------
# [i] Create clusters
#------------------------------------------------------------------------------

echo -e "\n---[ Multipass VMs ]---------------------------------------------\n"

MPLIST=$(multipass list)
N=$(list clusters | wc -w)

# Start all the clusters
for CLUSTER in $(list clusters all); do
    echo "${MPLIST}" | grep "${CLUSTER}" | grep -q Running || {
      { multipass start "${CLUSTER}" 2>/dev/null || (launch_k8s "${CLUSTER}") } &
      sleep 5
    }
done; wait

# Get all the IPs
declare -A IP
for CLUSTER in $(list clusters all); do
    IP[${CLUSTER}]=$(multipass info "${CLUSTER}" | grep IPv4 | awk '{print $2}')
    echo "${CLUSTER} = ${IP[${CLUSTER}]}"
done

#------------------------------------------------------------------------------
# [i] Setup KUBECONFIG
#------------------------------------------------------------------------------

echo -e "\n---[ KUBECONFIG ]------------------------------------------------\n"

K8SCFG=~/.kube/config
for CLUSTER in $(list clusters all); do
  K8SCFG=${K8SCFG}:./tmp/${CLUSTER}/config
done

KUBECONFIG=${K8SCFG} \
kubectl config view --flatten > ./tmp/config && cp ./tmp/config ~/.kube/config

function k0 {
  kubectl --context "${CLUS0}" "${@}"
}

echo "${K8SCFG}" | tr ':' '\n'

#------------------------------------------------------------------------------
# [i] Wait for all the clusters to be ready
#------------------------------------------------------------------------------

echo -e "\n---[ Wait for clusters ]-----------------------------------------\n"

for CLUSTER in $(list clusters); do
  until kubectl --context "${CLUSTER}" wait --for=condition=Ready pods --all -A 2>/dev/null; do
    sleep 2
  done &
done; wait

#------------------------------------------------------------------------------
# [i] Setup CoreDNS server DNS entries for demo.lab
#------------------------------------------------------------------------------

echo -e "\n---[ CoreDNS ]---------------------------------------------------\n"

for CLUSTER in $(list clusters); do

kubectl --context "${CLUSTER}" -n kube-system create cm coredns-custom \
--dry-run=client -o yaml --from-literal=demo.server="demo.lab {
  hosts {
    ttl 60
    ${IP[${CLUS0}]} vault.demo.lab
    ${IP[${CLUSTER}]} httpbin.demo.lab
    fallthrough
  }
}" | kubectl --context "${CLUSTER}" -n kube-system apply -f -

done

#------------------------------------------------------------------------------
# [i] Setup the ArgoCD and register the clusters to it
#------------------------------------------------------------------------------

echo -e "\n---[ ArgoCD ]----------------------------------------------------\n"

# Install ArgoCD
k0 create ns argocd --dry-run=client -o yaml | k0 apply -f -
k0 -n argocd apply -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml > /dev/null
k0 -n argocd patch svc argocd-server -p '{"spec": {"type": "LoadBalancer"}}'
k0 wait --for=condition=Ready --timeout=360s pods --all -A

# Get the password
ARGOCD_PASS=$(
  k0 -n argocd \
  get secret argocd-initial-admin-secret \
  -o jsonpath='{.data.password}' | base64 -d
)

# Check if the ArgoCD context exists
argocd context "${CLUS0}" 2> /dev/null || {

  # Login to ArgoCD
  argocd login "${IP[${CLUS0}]}" \
    --insecure \
    --name "${CLUS0}" \
    --username admin \
    --password "${ARGOCD_PASS}"

  # Add clusters with labels
  for STAMP in $(list stamps); do for CLUSTER in ${STAMPS[${STAMP}]}; do
    argocd cluster add -y "${CLUSTER}" --label name="${CLUSTER}" --label stamp="${STAMP}"
  done; done
}

# Add the ArgoCD configmap with custom settings
k0 apply -f ./conf/argocd-cm.yaml

# Cache the ArgoCD apps list
sleep 2; ALIST=$(argocd app list)

##-----------------------------------------------------------------------------
## TODO Deploy a controller to ${CLUS0} that will take care of everything below
## by reconciling a Stamp CRDs that will be created after deploying the
## controller.
##-----------------------------------------------------------------------------

#------------------------------------------------------------------------------
# [i] Deploy vault
#------------------------------------------------------------------------------

echo -e "\n---[ Deploy Vault ]----------------------------------------------\n"

k0 apply -Rf ./conf/argocd/vault

[ "$(echo "${ALIST}" | grep vault | grep -c 'Synced  Healthy')" -eq 1 ] || {
  echo "argocd app sync -l name=vault"
  argocd app sync -l name=vault > /dev/null
  argocd app wait -l name=vault > /dev/null
}

#------------------------------------------------------------------------------
# [i] Populate vault
#------------------------------------------------------------------------------

echo -e "\n---[ Populate Vault ]--------------------------------------------\n"

export VAULT_ADDR="http://${IP[${CLUS0}]}:8200"
export VAULT_TOKEN=root

while ! vault status &>/dev/null; do sleep 1; done

# One root CA for all the stamps
vault secrets list | grep -q "mesh" || {
  vault secrets enable --path "mesh" \
  -description "PKI for the mesh" pki
  vault secrets tune -max-lease-ttl=87600h "mesh"
  vault write -field=certificate "mesh/root/generate/internal" \
  common_name="mesh" ttl=87600h > /dev/null
  vault write "mesh/config/urls" \
     issuing_certificates="${VAULT_ADDR}/v1/mesh/ca" \
     crl_distribution_points="${VAULT_ADDR}/v1/mesh/crl"
}

# Create a policy for cert-manager to issue intermediate CAs
vault policy list | grep -q "mesh-cert-manager" || {
vault policy write "mesh-cert-manager" - << EOF
path "mesh/root/sign-intermediate" {
  capabilities = ["create", "read", "update"]
}
path "mesh/intermediate/set-signed" {
  capabilities = ["create", "update"]
}
path "mesh/roles/ica" {
  capabilities = ["read"]
}
EOF
}

# Create an AppRole for cert-manager to issue intermediate CAs
vault auth list | grep -q 'approle' || {
  vault auth enable approle
  vault write "auth/approle/role/mesh-cert-manager" \
    secret_id_ttl=0 \
    token_num_uses=0 \
    token_ttl=0 \
    token_max_ttl=0 \
    secret_id_num_uses=0 \
    token_policies="mesh-cert-manager"
}

#------------------------------------------------------------------------------
# [n] Get the RoleID and SecretID for cert-manager
#------------------------------------------------------------------------------

ROLE_ID=$(
  vault read -format json \
  "auth/approle/role/mesh-cert-manager/role-id" | \
  jq -r '.data.role_id'
)

SECRET_ID_B64=$(
  vault write -format json \
  -f "auth/approle/role/mesh-cert-manager/secret-id" | \
  jq -r '.data.secret_id' | base64 -w0
)

#------------------------------------------------------------------------------
# [i] Deploy cert-manager
#------------------------------------------------------------------------------

echo -e "\n---[ cert-manager ]----------------------------------------------\n"

k0 apply -Rf ./conf/argocd/cert-manager

[ "$(echo "${ALIST}" | grep cert-manager | grep -c 'Synced  Healthy')" -eq "${N}" ] || {
  echo "argocd app sync -l name=cert-manager --async"
  argocd app sync -l name=cert-manager --async > /dev/null
  argocd app wait -l name=cert-manager > /dev/null
}

#------------------------------------------------------------------------------
# [i] Deploy the Istio issuers chart
#------------------------------------------------------------------------------

echo -e "\n---[ Istio issuers ]---------------------------------------------\n"

helm template ./charts/istio-issuers \
--set roleID="${ROLE_ID}" \
--set secretID="${SECRET_ID_B64}" |
k0 apply -f -

[ "$(echo "${ALIST}" | grep issuers | grep -c 'Synced  Healthy')" -eq "${N}" ] || {
  echo "argocd app sync -l name=istio-issuers --async"
  argocd app sync -l name=istio-issuers --async > /dev/null
  argocd app wait -l name=istio-issuers --degraded --timeout 30 > /dev/null || true
}

#------------------------------------------------------------------------------
# [i] Deploy Istio
#------------------------------------------------------------------------------

echo -e "\n---[ Istio ]-----------------------------------------------------\n"

k0 apply -Rf ./conf/argocd/istio

# Base
[ "$(echo "${ALIST}" | grep istio-base | grep -c 'Synced  Healthy')" -eq "${N}" ] || {
  echo "argocd app sync -l name=istio-base --async"
  argocd app sync -l name=istio-base --async > /dev/null
  argocd app wait -l name=istio-base > /dev/null
}

# Cni
[ "$(echo "${ALIST}" | grep istio-cni | grep -c 'Synced  Healthy')" -eq "${N}" ] || {
  echo "argocd app sync -l name=istio-cni --async"
  argocd app sync -l name=istio-cni --async > /dev/null
  argocd app wait -l name=istio-cni > /dev/null
}

# Pilot
[ "$(echo "${ALIST}" | grep istio-pilot | grep -c 'Synced  Healthy')" -eq "${N}" ] || {
 echo "argocd app sync -l name=istio-pilot --async"
 argocd app sync -l name=istio-pilot --async > /dev/null
 argocd app wait -l name=istio-pilot > /dev/null
}

# IngressGateways
[ "$(echo "${ALIST}" | grep istio-igws | grep -c 'Synced  Healthy')" -eq "${N}" ] || {
  echo "argocd app sync -l name=istio-igws --async"
  argocd app sync -l name=istio-igws --async > /dev/null
  argocd app wait -l name=istio-igws > /dev/null
}

# East-West gateway
[ "$(echo "${ALIST}" | grep istio-ewgw | grep -c 'Synced  Healthy')" -eq "${N}" ] || {
  echo "argocd app sync -l name=istio-ewgw --async"
  argocd app sync -l name=istio-ewgw --async > /dev/null
  argocd app wait -l name=istio-ewgw > /dev/null
}

#------------------------------------------------------------------------------
# [i] Enable Istio endpoint discovery
#------------------------------------------------------------------------------

echo -e "\n---[ Istio remote secrets ]--------------------------------------\n"

for STAMP in $(list stamps); do
  CLUS=(${STAMPS[${STAMP}]})
  istioctl x create-remote-secret --context "${CLUS[0]}" --name="${CLUS[0]}" | \
  kubectl --context "${CLUS[1]}" apply -f -
  istioctl x create-remote-secret --context "${CLUS[1]}" --name="${CLUS[1]}" | \
  kubectl --context "${CLUS[0]}" apply -f -
done

#------------------------------------------------------------------------------
# [i] Deploy the httpbin service
#------------------------------------------------------------------------------

echo -e "\n---[ httpbin ]---------------------------------------------------\n"

k0 apply -Rf ./conf/argocd/httpbin

[ "$(echo "${ALIST}" | grep httpbin | grep -c 'Synced  Healthy')" -eq "${N}" ] || {
  echo "argocd app sync -l name=httpbin --async"
  argocd app sync -l name=httpbin --async > /dev/null
  argocd app wait -l name=httpbin > /dev/null
}

#------------------------------------------------------------------------------
# [?] Setup a non-k8s workload (optional)
#------------------------------------------------------------------------------

[ -z "${SKIP_VM}" ] && {

  echo -e "\n---[ VM setup ]--------------------------------------------------\n"

  # Launch the VM
  multipass start virt-01 2>/dev/null || launch_vms virt-01

  # Generate the VM files
  istioctl x workload entry configure \
    --context "${CLUS1}" \
    -n httpbin \
    -r 1-17-1 \
    --name httpbin \
    --clusterID "${CLUS1}" \
    --autoregister \
    -o ./tmp/virt-01/vm-files

  # Use the custom address defined in ISTIOD_CUSTOM_HOST
  grep -rl 'istiod-1-17-1.istio-system.svc' ./tmp | \
  xargs sed -i "s/istiod-1-17-1.istio-system.svc/istiod.${CLUS1}/g"

  # Download the istio-sidecar.deb
  [ -f ./tmp/virt-01/istio-sidecar.deb ] || {
    curl -sLo ./tmp/virt-01/istio-sidecar.deb \
    https://storage.googleapis.com/istio-release/releases/1.17.1/deb/istio-sidecar-"$(arch)".deb
  }

  # Setup the VM files
  cp ./conf/vm-setup ./tmp/virt-01
  multipass exec virt-01 -- sudo /mnt/host/vm-setup
}

#------------------------------------------------------------------------------
# Echo useful info
#------------------------------------------------------------------------------

echo -e "\n---[ Info ]------------------------------------------------------\n"

echo "ArgoCD WebUI: https://${IP[${CLUS0}]}"
echo "ArgoCD User: admin"
echo "ArgoCD Pass: ${ARGOCD_PASS}"
echo
echo "Vault:"
echo "export VAULT_ADDR=${VAULT_ADDR}"
echo "export VAULT_TOKEN=${VAULT_TOKEN}"
