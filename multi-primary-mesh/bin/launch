#!/usr/bin/env bash

#------------------------------------------------------------------------------
# [i] Source helper functions
#------------------------------------------------------------------------------

# shellcheck source=/dev/null
source lib/misc.sh

#------------------------------------------------------------------------------
# [i] Pull-through image cache
#------------------------------------------------------------------------------

echo -e "\n---[ Pull-through registries ]-----------------------------------\n"

docker start registry-docker.io || docker run -d -p 5001:5000 \
  -e REGISTRY_PROXY_REMOTEURL=https://registry-1.docker.io \
  --restart always \
  --name registry-docker.io \
  registry:2

docker start registry-quay.io || docker run -d -p 5002:5000 \
  -e REGISTRY_PROXY_REMOTEURL=https://quay.io \
  --restart always \
  --name registry-quay.io \
  registry:2

docker start registry-ghcr.io || docker run -d -p 5003:5000 \
  -e REGISTRY_PROXY_REMOTEURL=https://ghcr.io \
  --restart always \
  --name registry-ghcr.io \
  registry:2

#------------------------------------------------------------------------------
# [i] Create an Istio root CA
#------------------------------------------------------------------------------

echo -e "\n---[ Istio root CA ]---------------------------------------------\n"

[ -d ./tmp/istio-ca ] || {
  mkdir -p ./tmp/istio-ca
  step certificate create \
    "Istio root CA" \
    "./tmp/istio-ca/root-cert.pem" \
    "./tmp/istio-ca/root-key.pem" \
    --san "*.demo.lab" \
    --not-after 87600h \
    --profile root-ca \
    --no-password \
    --insecure \
    --kty RSA \
    --force
}

#------------------------------------------------------------------------------
# [i] Create clusters
#------------------------------------------------------------------------------

echo -e "\n---[ Multipass VMs ]---------------------------------------------\n"

{ multipass start kube-00 2>/dev/null || (sleep 00; launch_k8s kube-00) } &
{ multipass start kube-01 2>/dev/null || (sleep 05; launch_k8s kube-01) } &
{ multipass start kube-02 2>/dev/null || (sleep 10; launch_k8s kube-02) } &

wait

declare -A IP=(
  [kube-00]="$(multipass info kube-00 | grep IPv4 | awk '{print $2}')"
  [kube-01]="$(multipass info kube-01 | grep IPv4 | awk '{print $2}')"
  [kube-02]="$(multipass info kube-02 | grep IPv4 | awk '{print $2}')"
)

#------------------------------------------------------------------------------
# [i] Setup KUBECONFIG
#------------------------------------------------------------------------------

KUBECONFIG=~/.kube/config:tmp/kube-00/config:tmp/kube-01/config:tmp/kube-02/config \
kubectl config view --flatten > ./tmp/config && cp ./tmp/config ~/.kube/config

#------------------------------------------------------------------------------
# [i] Setup the ArgoCD client and add clusters
#------------------------------------------------------------------------------

echo -e "\n---[ ArgoCD ]----------------------------------------------------\n"

ARGOCD_PASS=$(
  kubectl --context kube-00 -n argocd \
  get secret argocd-initial-admin-secret \
  -o jsonpath='{.data.password}' | base64 -d
)

argocd context kube-00 2> /dev/null || {

  argocd login "${IP[kube-00]}" \
    --insecure \
    --name kube-00 \
    --username admin \
    --password "${ARGOCD_PASS}"

  argocd cluster add -y kube-01
  argocd cluster add -y kube-02
}

kubectl --context kube-00 apply -f ./conf/argocd-cm.yaml

sleep 2; ALIST=$(argocd app list)

#------------------------------------------------------------------------------
# [i] Setup CoreDNS server DNS entries for demo.lab
#------------------------------------------------------------------------------

echo -e "\n---[ CoreDNS ]---------------------------------------------------\n"

for i in kube-01 kube-02; do

kubectl --context "${i}" -n kube-system create cm coredns-custom \
--dry-run=client -o yaml --from-literal=demo.server="demo.lab {
  hosts {
    ttl 60
    ${IP[kube-00]} vault.demo.lab
    ${IP["${i}"]} httpbin.demo.lab
    fallthrough
  }
}" | kubectl --context "${i}" -n kube-system apply -f -

done

#------------------------------------------------------------------------------
# [i] Deploy vault
#------------------------------------------------------------------------------

echo -e "\n---[ Deploy Vault ]----------------------------------------------\n"

kubectl --context kube-00 apply -f ./conf/argocd-vault.yaml

[ "$(echo "${ALIST}" | grep vault | grep -c 'Synced  Healthy')" -eq 1 ] || {
  echo "argocd app sync vault"
  argocd app sync vault > /dev/null
}

#------------------------------------------------------------------------------
# [i] Populate vault
#------------------------------------------------------------------------------

echo -e "\n---[ Populate Vault ]--------------------------------------------\n"

export VAULT_ADDR="http://${IP[kube-00]}:8200"
export VAULT_TOKEN=root

while ! vault status > /dev/null 2>&1; do sleep 1; done

# Root CA for the red-balloon stamp (kube-01 and kube-02)
vault secrets list | grep -q 'stamp/red-balloon' || {

  vault secrets enable --path stamp/red-balloon \
  -description 'PKI for the red-balloon stamp' pki

  vault secrets tune -max-lease-ttl=87600h stamp/red-balloon

  vault write -field=certificate stamp/red-balloon/root/generate/internal \
  common_name="red-balloon" ttl=87600h > /dev/null

  vault write stamp/red-balloon/config/urls \
     issuing_certificates="${VAULT_ADDR}/v1/stamp/red-balloon/ca" \
     crl_distribution_points="${VAULT_ADDR}/v1/stamp/red-balloon/crl"
}

# Create a policy for cert-manager to issue intermediate CAs
vault policy list | grep -q 'red-balloon-cert-manager' || {
vault policy write red-balloon-cert-manager - <<EOF
path "stamp/red-balloon/intermediate/set-signed" {
  capabilities = ["create", "update"]
}
path "stamp/red-balloon/roles/ica" {
  capabilities = ["read"]
}
EOF
}

# Create an AppRole for cert-manager to issue intermediate CAs
vault auth list | grep -q 'approle' || {
  vault auth enable approle
  vault write auth/approle/role/red-balloon-cert-manager \
    secret_id_ttl=0 \
    token_num_uses=0 \
    token_ttl=0 \
    token_max_ttl=0 \
    secret_id_num_uses=0 \
    token_policies=red-balloon-cert-manager
}

ROLE_ID=$(vault read -format json auth/approle/role/red-balloon-cert-manager/role-id | jq -r '.data.role_id')
SECRET_ID_B64=$(vault write -format json -f auth/approle/role/red-balloon-cert-manager/secret-id | jq -r '.data.secret_id' | base64 -w0)

# Create a role for requesting intermediate CAs
vault write stamp/red-balloon/roles/ica allow_any_name=true

#------------------------------------------------------------------------------
# [i] Deploy cert-manager
#------------------------------------------------------------------------------

echo -e "\n---[ cert-manager ]----------------------------------------------\n"

kubectl --context kube-00 apply -f ./conf/argocd-cert-manager.yaml

[ "$(echo "${ALIST}" | grep cert-manager | grep -c 'Synced  Healthy')" -eq 2 ] || {
  echo "argocd app sync kube-01-cert-manager kube-02-cert-manager"
  argocd app sync kube-01-cert-manager kube-02-cert-manager > /dev/null
  argocd app wait kube-01-cert-manager kube-02-cert-manager > /dev/null
}

#------------------------------------------------------------------------------
# [?] Create Istio ICA certificates
#------------------------------------------------------------------------------

echo -e "\n---[ Istio ICA ]-------------------------------------------------\n"

for i in kube-01 kube-02; do

# TODO: Move this to a file or ArgoCD
kubectl --context ${i} apply -f - << EOF
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: vault-ica-approle
  namespace: istio-system
data:
  secretId: ${SECRET_ID_B64}
EOF

kubectl --context ${i} apply -f - << EOF
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: vault-ica
  namespace: istio-system
spec:
  vault:
    path: stamp/red-balloon/root/sign-intermediate
    server: http://vault.demo.lab:8200
    auth:
      appRole:
        path: approle
        roleId: ${ROLE_ID}
        secretRef:
          name: vault-ica-approle
          key: secretId
EOF

done

#------------------------------------------------------------------------------
# [i] Deploy Istio
#------------------------------------------------------------------------------

echo -e "\n---[ Istio ]-----------------------------------------------------\n"

kubectl --context kube-00 apply -f ./conf/argocd-istio.yaml

# Base
[ "$(echo "${ALIST}" | grep istio-base | grep -c 'Synced  Healthy')" -eq 2 ] || {
  echo "argocd app sync kube-01-istio-base kube-02-istio-base"
  argocd app sync kube-01-istio-base kube-02-istio-base > /dev/null
  argocd app wait kube-01-istio-base kube-02-istio-base > /dev/null
}

# Cni
[ "$(echo "${ALIST}" | grep istio-cni | grep -c 'Synced  Healthy')" -eq 2 ] || {
  echo "argocd app sync kube-01-istio-cni kube-02-istio-cni"
  argocd app sync kube-01-istio-cni kube-02-istio-cni > /dev/null
  argocd app wait kube-01-istio-cni kube-02-istio-cni > /dev/null
}

# Pilot
[ "$(echo "${ALIST}" | grep istio-pilot | grep -c 'Synced  Healthy')" -eq 2 ] || {
 echo "argocd app sync kube-01-istio-pilot kube-02-istio-pilot"
 argocd app sync kube-01-istio-pilot kube-02-istio-pilot > /dev/null
 argocd app wait kube-01-istio-pilot kube-02-istio-pilot > /dev/null
}

# IngressGateways
[ "$(echo "${ALIST}" | grep istio-igws | grep -c 'Synced  Healthy')" -eq 2 ] || {
  echo "argocd app sync kube-01-istio-igws kube-02-istio-igws"
  argocd app sync kube-01-istio-igws kube-02-istio-igws > /dev/null
  argocd app wait kube-01-istio-igws kube-02-istio-igws > /dev/null
}

# East-West gateway
[ "$(echo "${ALIST}" | grep istio-ewgw | grep -c 'Synced  Healthy')" -eq 2 ] || {
  echo "argocd app sync kube-01-istio-ewgw kube-02-istio-ewgw"
  argocd app sync kube-01-istio-ewgw kube-02-istio-ewgw > /dev/null
  argocd app wait kube-01-istio-ewgw kube-02-istio-ewgw > /dev/null
}

#------------------------------------------------------------------------------
# [i] Enable Istio endpoint discovery
#------------------------------------------------------------------------------

echo -e "\n---[ Istio remote secrets ]--------------------------------------\n"

istioctl x create-remote-secret --context kube-01 --name=kube-01 | \
kubectl --context kube-02 apply -f -
istioctl x create-remote-secret --context kube-02 --name=kube-02 | \
kubectl --context kube-01 apply -f -

#------------------------------------------------------------------------------
# [i] Deploy the httpbin service
#------------------------------------------------------------------------------

echo -e "\n---[ httpbin ]---------------------------------------------------\n"

kubectl --context kube-00 apply -f ./conf/argocd-httpbin.yaml

[ "$(echo "${ALIST}" | grep httpbin | grep -c 'Synced  Healthy')" -eq 2 ] || {
  echo "argocd app sync kube-01-httpbin kube-02-httpbin"
  argocd app sync kube-01-httpbin kube-02-httpbin > /dev/null
  argocd app wait kube-01-httpbin kube-02-httpbin > /dev/null
}

#------------------------------------------------------------------------------
# [?] Setup a non-k8s workload (optional)
#------------------------------------------------------------------------------

[ -z "${SKIP_VM}" ] && {

  echo -e "\n---[ VM setup ]--------------------------------------------------\n"

  # Launch the VM
  multipass start virt-01 2>/dev/null || launch_vms virt-01

  # Generate the VM files
  istioctl x workload entry configure \
    --context kube-01 \
    -n httpbin \
    -r 1-17-1 \
    --name httpbin \
    --clusterID kube-01 \
    --autoregister \
    -o ./tmp/virt-01/vm-files

  # Use the custom address defined in ISTIOD_CUSTOM_HOST
  grep -rl 'istiod-1-17-1.istio-system.svc' ./tmp | \
  xargs sed -i 's/istiod-1-17-1.istio-system.svc/istiod.kube-01/g'

  # Download the istio-sidecar.deb
  [ -f ./tmp/virt-01/istio-sidecar.deb ] || {
    curl -sLo ./tmp/virt-01/istio-sidecar.deb \
    https://storage.googleapis.com/istio-release/releases/1.17.1/deb/istio-sidecar-"$(arch)".deb
  }

  # Setup the VM files
  cp ./conf/vm-setup ./tmp/virt-01
  multipass exec virt-01 -- sudo /mnt/host/vm-setup
}

#------------------------------------------------------------------------------
# Echo ArgoCD info
#------------------------------------------------------------------------------

echo -e "\n---[ Info ]------------------------------------------------------\n"

echo "ArgoCD WebUI: https://${IP[kube-00]}"
echo "ArgoCD User: admin"
echo "ArgoCD Pass: ${ARGOCD_PASS}"
